""" Map leader to space ---------------------
let mapleader=" "

""" Plugins  --------------------------------
set surround
set commentary
set argtextobj
"set easymotion
set textobj-entire
set highlightedyank
set sneak
set which-key

""" Plugin settings -------------------------
let g:argtextobj_pairs="[:],(:),<:>"

""" Common settings -------------------------
set showmode
set incsearch
set nu
set scrolloff=5
set relativenumber
set number 
set notimeout

""" Idea specific settings ------------------
set ideajoin
set idearefactormode=keep

""" Mappings --------------------------------
imap jj <Esc>
imap jk <Esc>

imap <C-b> <ESC>^i
imap <C-e> <END>

map <S-l>       <Action>(NextTab)
map <s-h>     <Action>(PreviousTab)

let g:WhichKeyDesc_zen = "<Space>z  Zen"
map <leader>z   <Action>(ToggleDistractionFreeMode)

map <C-h>       <Action>(NextSplitter)
map <C-l>       <Action>(PrevSplitter)

map <C-o> <Action>(Back)
map <C-i> <Action>(Forward)

" Buffers / windows
let g:WhichKeyDesc_quit = "<Space>q  Quit"
map <leader>q   <Action>(CloseContent)
let g:WhichKeyDesc_close = "<Space>c  Close"
map <leader>c   <Action>(CloseContent)

let g:WhichKeyDesc_buffer = "<Space>b  Buffers"
let g:WhichKeyDesc_buffer_all_but_active = "<Space>be Close all but active"
map <leader>be  <Action>(CloseAllEditorsButActive)
let g:WhichKeyDesc_buffer_all = "<Space>bw Close all"
map <leader>bw  <Action>(CloseAllEditors)
let g:WhichKeyDesc_buffer_left = "<Space>bh Close all to the left"
map <leader>bh <Action>(CloseAllToTheLeft)
let g:WhichKeyDesc_buffer_right = "<Space>bl Close all to the right"
map <leader>bl <Action>(CloseAllToTheRight)

" Git
let g:WhichKeyDesc_git = "<Space>g  Git"
let g:WhichKeyDesc_git_blame = "<Space>gl  Blame"
map <leader>gl  <Action>(Annotate)
let g:WhichKeyDesc_git_branches = "<Space>gb  Branches"
map <leader>gb  <Action>(Git.Branches)

" Debugging
let g:WhichKeyDesc_debug = "<Space>d  Debug"
let g:WhichKeyDesc_debug_breakpoint = "<Space>db  Breakpoint toggle"
map <leader>db  <Action>(ToggleLineBreakpoint)
let g:WhichKeyDesc_debug_run = "<Space>dr Run with debugging"
map <leader>dr  <Action>(Debug)
let g:WhichKeyDesc_debug_stop = "<Space>ds Stop debugging"
map <leader>ds  <Action>(Stop)

map <leader>td  <Action>(RiderUnitTestDebugContextAction)

" Search
let g:WhichKeyDesc_p = "<Space>p  Find"
map <leader>p   <Action>(SearchEverywhere)

let g:WhichKeyDesc_search = "<Space>f  Search"
let g:WhichKeyDesc_search_text = "<Space>ff Text"
map <leader>ft  <Action>(FindInPath)
let g:WhichKeyDesc_search_recent = "<Space>ff  Recent"
map <leader>fr  <Action>(RecentFiles)

map <C-s>       <Action>(SaveDocument)
let g:WhichKeyDesc_write = "<Space>w  Write"
map <leader>w   <Action>(SaveDocument)
let g:WhichKeyDesc_comment = "<Space>/  Comment"
map <leader>/   <Action>(CommentByLineComment)

let g:WhichKeyDesc_clear = "<Space>s  NoHighlight"
map <leader>s   :let @/=""<CR>
let g:WhichKeyDesc_explorer = "<Space>e  Explorer"
map <leader>e   <Action>(SelectInProjectView)


" Language
map K           <Action>(QuickJavaDoc)
map gh          <Action>(QuickJavaDoc)
map gl          <Action>(ShowErrorDescription)
map gE          <Action>(ShowErrorDescription)
map gR          <Action>(RenameElement)
map gd          <Action>(GotoDeclaration)
map gy          <Action>(GotoImplementation)
map gr          <Action>(FindUsages)
map <C-n>       <Action>(GotoNextError)
map <C-p>       <Action>(GotoPreviousError)

let g:WhichKeyDesc_lang = "<Space>l  LSP"
map <leader>la  <Action>(ShowIntentionActions)
map <leader>lr  <Action>(RenameElement)
map <leader>lf  <Action>(ReformatCode)
map <leader>lR  <Action>(FindUsages)
map <leader>ld  <Action>(GotoDeclaration)
map <leader>li  <Action>(GotoImplementation)

